/*
 * Copyright (C) 2012 Vitaljok
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * ChromosomeTestFrame.java
 *
 * Created on Aug 19, 2012, 11:52:00 AM
 */
package phd.mrs.heuristic;

import java.util.LinkedList;
import java.util.List;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import org.jgap.Gene;
import org.jgap.IChromosome;
import phd.mrs.heuristic.object.Project;
import phd.mrs.heuristic.ga.AgentGene;
import phd.mrs.heuristic.utils.SolutionCalculator;

/**
 *
 * @author Vitaljok
 */
public class ChromosomeTestFrame extends javax.swing.JFrame {

    IChromosome chromosome;
    Project project;

    public ChromosomeTestFrame(IChromosome chromosome, Project project) {
        this.chromosome = chromosome;
        this.project = project;
        initComponents();

        MyTableModel model = new MyTableModel(chromosome);
        this.jTable.setModel(model);

        this.jTable.setRowSorter(new TableRowSorter<MyTableModel>(model));

        this.jTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        this.jTable.getColumnModel().getColumn(0).setMaxWidth(50);
        this.jTable.getColumnModel().getColumn(1).setMaxWidth(50);


    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();
        jButtonEvaluate = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableRes = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(jTable);

        jButtonEvaluate.setText("Evaluate");
        jButtonEvaluate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEvaluateActionPerformed(evt);
            }
        });

        jTableRes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTableRes);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButtonEvaluate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1035, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonEvaluate)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonEvaluateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEvaluateActionPerformed
        Double value = this.project.getGaConfig().getFitnessFunction().getFitnessValue(this.chromosome);

        List<AgentGene> solution = new LinkedList<>();

        for (Gene gene : this.chromosome.getGenes()) {
            solution.add((AgentGene) gene);
        }

        SolutionCalculator calc = new SolutionCalculator(solution, project);
        calc.process();

        DefaultTableModel model = new DefaultTableModel(new Object[]{"Position", "Value"}, 0);
        model.addRow(new Object[]{"Fitness value", value});
        model.addRow(new Object[]{"Qinv", calc.getQinv()});
        model.addRow(new Object[]{"Qsys_design", calc.getQsys_design()});        
        model.addRow(new Object[]{"Qdesign", calc.getQdesign()});
        model.addRow(new Object[]{"Qprod", calc.getQprod()});
        model.addRow(new Object[]{"Qassy", calc.getQassy()});
        model.addRow(new Object[]{"Qoper", calc.getQoper()});
        model.addRow(new Object[]{"Qmaint", calc.getQmaint()});
        model.addRow(new Object[]{"Qrepl", calc.getQrepl()});

        this.jTableRes.setModel(model);


    }//GEN-LAST:event_jButtonEvaluateActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonEvaluate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable;
    private javax.swing.JTable jTableRes;
    // End of variables declaration//GEN-END:variables

    class MyTableModel extends AbstractTableModel {

        String[] colNames = {"Inst.", "Comps", "Agent"};
        IChromosome chrom;

        public MyTableModel(IChromosome chrom) {
            this.chrom = chrom;
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return columnIndex == 0;
        }

        @Override
        public int getRowCount() {
            return chrom.size();
        }

        @Override
        public int getColumnCount() {
            return 3;
        }

        @Override
        public Class<?> getColumnClass(int columnIndex) {
            return getValueAt(0, columnIndex).getClass();
        }

        @Override
        public String getColumnName(int column) {
            return colNames[column];
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            switch (columnIndex) {
                case 0:
                    return (Integer) this.chrom.getGenes()[rowIndex].getAllele();
                case 1:
                    return ((AgentGene) this.chrom.getGenes()[rowIndex]).getAgent().getComponents().size();
                case 2:
                    return ((AgentGene) this.chrom.getGenes()[rowIndex]).getAgent().getComponents();
                default:
                    throw new AssertionError();
            }
        }

        @Override
        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
            if (aValue == null) {
                aValue = new Integer(0);
            }
            super.setValueAt(aValue, rowIndex, columnIndex);
            this.chrom.getGenes()[rowIndex].setAllele(aValue);
        }
    }
}
