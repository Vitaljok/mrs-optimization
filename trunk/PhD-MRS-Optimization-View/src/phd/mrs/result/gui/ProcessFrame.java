/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ProcessFrame.java
 *
 * Created on Sep 22, 2012, 11:49:26 AM
 */
package phd.mrs.result.gui;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.PersistenceException;
import javax.persistence.Query;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.AbstractTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.XYDataset;
import phd.mrs.heuristic.db.Evolution;
import phd.mrs.heuristic.db.Process;

/**
 *
 * @author Vitaljok
 */
public class ProcessFrame extends JFrame {

    EntityManager entityManager;
    EntityManagerFactory entityManagerFactory;

    /** Creates new form ProcessFrame */
    public ProcessFrame() {
        initComponents();

        try {
            entityManagerFactory = Persistence.createEntityManagerFactory("PhD_MRS_Optimization_Result_PU");
            entityManager = entityManagerFactory.createEntityManager();

        } catch (PersistenceException ex) {
            JOptionPane.showMessageDialog(null, "Error connecting to Database\n" + ex, "Fatal error", JOptionPane.ERROR_MESSAGE);
            System.exit(1);
        }

        this.statusLabel.setText("Connected to MRS database.");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        leftPanel = new javax.swing.JPanel();
        procToolBar = new javax.swing.JToolBar();
        procReloadBtn = new javax.swing.JButton();
        showBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        procTable = new javax.swing.JTable();
        rightPanel = new javax.swing.JPanel();
        jSplitPane3 = new javax.swing.JSplitPane();
        dataPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        displayPanel = new javax.swing.JPanel();
        statusPanel = new javax.swing.JPanel();
        statusLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("MRS evlution results");
        setName("mrsFrame"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jSplitPane1.setPreferredSize(new java.awt.Dimension(1200, 800));

        leftPanel.setMaximumSize(new java.awt.Dimension(300, 32767));
        leftPanel.setPreferredSize(new java.awt.Dimension(250, 10));
        leftPanel.setLayout(new java.awt.BorderLayout());

        procToolBar.setFloatable(false);
        procToolBar.setRollover(true);

        procReloadBtn.setText("Reload processes");
        procReloadBtn.setToolTipText("");
        procReloadBtn.setFocusable(false);
        procReloadBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        procReloadBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        procReloadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                procReloadBtnActionPerformed(evt);
            }
        });
        procToolBar.add(procReloadBtn);

        showBtn.setText("Show chart -->");
        showBtn.setFocusable(false);
        showBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        showBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        showBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showBtnActionPerformed(evt);
            }
        });
        procToolBar.add(showBtn);

        leftPanel.add(procToolBar, java.awt.BorderLayout.NORTH);

        procTable.setModel(procTableModel);
        procTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        procTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        procTable.getSelectionModel().addListSelectionListener(procTableListener);
        jScrollPane1.setViewportView(procTable);

        leftPanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jSplitPane1.setLeftComponent(leftPanel);

        rightPanel.setLayout(new java.awt.BorderLayout());

        jSplitPane3.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        dataPanel.setLayout(new java.awt.BorderLayout());

        jScrollPane2.setViewportView(jTextPane1);

        dataPanel.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jSplitPane3.setBottomComponent(dataPanel);

        displayPanel.setPreferredSize(new java.awt.Dimension(800, 600));
        displayPanel.setLayout(new java.awt.BorderLayout());
        jSplitPane3.setTopComponent(displayPanel);

        rightPanel.add(jSplitPane3, java.awt.BorderLayout.CENTER);

        jSplitPane1.setRightComponent(rightPanel);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        statusPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        statusPanel.setPreferredSize(new java.awt.Dimension(150, 25));
        statusPanel.setLayout(new java.awt.BorderLayout());

        statusLabel.setToolTipText("");
        statusPanel.add(statusLabel, java.awt.BorderLayout.CENTER);

        getContentPane().add(statusPanel, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void procReloadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_procReloadBtnActionPerformed
        entityManager.clear();
        Query query = entityManager.createNamedQuery("Process.findAll");
        //query.setHint(QueryHints.CACHE_USAGE, CacheUsage.DoNotCheckCache);
        this.procTableModel.setData(query.getResultList());
    }//GEN-LAST:event_procReloadBtnActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        entityManager.close();
        entityManagerFactory.close();
    }//GEN-LAST:event_formWindowClosing

    private void showBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showBtnActionPerformed
        if (procTable.getSelectedRowCount() == 0) {
           return;
        }
        
        Process proc = procTableModel.getData().get(procTable.getSelectedRow());
        
        double[][] data = new double[2][proc.getEvolutionList().size()];                
        
        for (int i = 0; i < proc.getEvolutionList().size(); i++) {
            Evolution ev = proc.getEvolutionList().get(i);
            data[1][i] = ev.getEvolutionPK().getGeneration();
            data[0][i] = ev.getFitnessValue();            
        }            
        
        DefaultXYDataset dataSet = new DefaultXYDataset();
        dataSet.addSeries("Aaa", data);
        
        JFreeChart chart = ChartFactory.createScatterPlot(null,
                "Cost", 
                "Generation",
                dataSet, 
                PlotOrientation.HORIZONTAL,
                false,
                false, 
                false);
                
        
        this.displayPanel.removeAll();
        this.displayPanel.add(new ChartPanel(chart));
        this.displayPanel.getParent().validate();
        
    }//GEN-LAST:event_showBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProcessFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ProcessFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel dataPanel;
    private javax.swing.JPanel displayPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane3;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JPanel leftPanel;
    private javax.swing.JButton procReloadBtn;
    private javax.swing.JTable procTable;
    private javax.swing.JToolBar procToolBar;
    private javax.swing.JPanel rightPanel;
    private javax.swing.JButton showBtn;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables
    ListSelectionListener procTableListener = new ListSelectionListener() {

        @Override
        public void valueChanged(ListSelectionEvent e) {

            String res = "Selected values: \n";

            for (int row : procTable.getSelectedRows()) {
                Process proc = procTableModel.getData().get(row);
                res += proc.getId() + "\t" + proc.getStartTime() + "\t" + proc.getEndTime() + "\n";
            }

            jTextPane1.setText(res);
        }
    };
    ProcessTableModel procTableModel = new ProcessTableModel();

    private class ProcessTableModel extends AbstractTableModel {

        private DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm");
        private List<phd.mrs.heuristic.db.Process> data = new ArrayList<>();

        public List<Process> getData() {
            return data;
        }

        public void setData(List<Process> data) {
            this.data.clear();
            this.data.addAll(data);
            this.fireTableDataChanged();
        }

        @Override
        public String getColumnName(int column) {
            switch (column) {
                case 0:
                    return "Start time";
                case 1:
                    return "End time";
                default:
                    return "";
            }
        }

        @Override
        public int getRowCount() {
            return data.size();
        }

        @Override
        public int getColumnCount() {
            return 2;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {

            switch (columnIndex) {
                case 0:
                    return dateFormat.format(data.get(rowIndex).getStartTime());
                case 1:
                    if (data.get(rowIndex).getEndTime() != null) {
                        return dateFormat.format(data.get(rowIndex).getEndTime());
                    } else {
                        return "<running>";
                    }
                default:
                    return null;
            }
        }
    }
}
