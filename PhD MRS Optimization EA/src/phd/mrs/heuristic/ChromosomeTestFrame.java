/*
 * Copyright (C) 2012 Vitaljok
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * ChromosomeTestFrame.java
 *
 * Created on Aug 19, 2012, 11:52:00 AM
 */
package phd.mrs.heuristic;

import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableRowSorter;
import org.jgap.Configuration;
import org.jgap.IChromosome;
import phd.mrs.heuristic.ga.AgentGene;

/**
 *
 * @author Vitaljok
 */
public class ChromosomeTestFrame extends javax.swing.JFrame {

    Configuration configuration;
    IChromosome chromosome;

    public ChromosomeTestFrame(Configuration configuration, IChromosome chromosome) {
        this.configuration = configuration;
        this.chromosome = chromosome;
        initComponents();        
        
        MyTableModel model = new MyTableModel(chromosome);
        this.jTable.setModel(model);
                
        this.jTable.setRowSorter(new TableRowSorter<MyTableModel>(model));
        
        this.jTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        this.jTable.getColumnModel().getColumn(0).setMaxWidth(50);
        this.jTable.getColumnModel().getColumn(1).setMaxWidth(50);

        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();
        jButtonEvaluate = new javax.swing.JButton();
        jLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(jTable);

        jButtonEvaluate.setText("Evaluate");
        jButtonEvaluate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEvaluateActionPerformed(evt);
            }
        });

        jLabel.setText("jLabel");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonEvaluate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 816, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 915, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonEvaluate)
                    .addComponent(jLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 619, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonEvaluateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEvaluateActionPerformed
        Double value = this.configuration.getFitnessFunction().getFitnessValue(this.chromosome);        
        
        this.jLabel.setText(value.toString());
    }//GEN-LAST:event_jButtonEvaluateActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonEvaluate;
    private javax.swing.JLabel jLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable;
    // End of variables declaration//GEN-END:variables

    class MyTableModel extends AbstractTableModel {

        String[] colNames = {"Inst.", "Comps", "Agent"};
        IChromosome chrom;

        public MyTableModel(IChromosome chrom) {
            this.chrom = chrom;
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return columnIndex == 0;
        }
        
        

        @Override
        public int getRowCount() {
            return chrom.size();
        }

        @Override
        public int getColumnCount() {
            return 3;
        }

        @Override
        public Class<?> getColumnClass(int columnIndex) {
            return getValueAt(0, columnIndex).getClass();
        }

        @Override
        public String getColumnName(int column) {
            return colNames[column];
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            switch (columnIndex) {
                case 0:
                    return (Integer)this.chrom.getGenes()[rowIndex].getAllele();
                case 1:
                    return ((AgentGene) this.chrom.getGenes()[rowIndex]).getAgent().getComponents().size();
                case 2:
                    return ((AgentGene) this.chrom.getGenes()[rowIndex]).getAgent().getComponents();
                default:
                    throw new AssertionError();
            }
        }

        @Override
        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
            if (aValue == null){
                aValue = new Integer(0);
            }
            super.setValueAt(aValue, rowIndex, columnIndex);            
            this.chrom.getGenes()[rowIndex].setAllele(aValue);            
        }       
        
    }
}
